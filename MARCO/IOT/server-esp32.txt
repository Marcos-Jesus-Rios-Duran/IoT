#include <WiFi.h>
#include <AsyncTCP.h>
#include <WebServer.h>
#include <HTTPClient.h>
#include <WebSocketsServer.h>
#include <DHT.h>
#include <ESP32Servo.h>

// Definicion de pines
#define LED_PIN 15
#define SERVO_PIN 21
#define DHT_PIN 19
#define TRIG_PIN 22
#define ECHO_PIN 23
#define DHTTYPE DHT11

// Configuracion de red de Wifi
const char* ssid = "xd"; // IP-ESP32:   192.168.43.125
const char* password = "EvUVqM3j3j";


// Configuracion de la API
const char* serverUrl = "http://192.168.1.130:9222/sensoresactuadores"; //de aquí los jala 
//const char* serverUrl = "http://192.168.1.119:3000/sensoresyactuadores";

unsigned long lastTime = 0;
const long interval = 5000;

DHT dht(DHT_PIN, DHTTYPE);
Servo servo;
WebServer server(80);
WebSocketsServer webSocket(81);

// Conexion WiFi con tiempo de espera maximo
void connectWiFi() {
  Serial.println("Conectando a WiFi...");
  WiFi.begin(ssid, password);

  unsigned long startAttemptTime = millis();
  while(WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 15000) { // 15 segundos maximo
    delay(1000);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConectado a WiFi con IP: " + WiFi.localIP().toString());
  } else {
    Serial.println("\nNo se pudo conectar a WiFi.");
  }
}

//Enviar datos a la API por POST
void sendDataToAPI(String tipo, String nombre, String valor, String unidad) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl);
    http.addHeader("Content-Type", "application/json");

    String payload = "{\"tipo\":\""+tipo+"\",\"nombre\":\""+nombre+"\",\"valor\":\""+valor+"\",\"unidad\":\""+unidad+"\"}";
    int httpResponseCode = http.POST(payload);

    Serial.println("Enviando: "+payload);
    Serial.println("Respuesta HTTP: "+String(httpResponseCode));
    
    http.end(); // Liberar recursos
  } else {
    Serial.println("Error en conexión WiFi. No se enviaron datos.");
  }
} 
// Enviar parametros de Temperatura, Humedad y Distancia
void scanParams() {
  if(millis() - lastTime > interval) {
    lastTime = millis();
    float temperature = dht.readTemperature();
    if (!isnan(temperature)) {
      sendDataToAPI("Sensor", "Temperatura", String(temperature), "°C");
    }
    float humidity = dht.readHumidity();
    if (!isnan(humidity)) {
      sendDataToAPI("Sensor", "Humedad", String(humidity), "%");
    }
    float distance = readUltrasonic();
    if (distance >= 0) {
      sendDataToAPI("Sensor","Ultrasonico", String(distance), "cm");
    }
  }

  if (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(ssid, password);
    Serial.println("Intentando reconectar WiFi...");
  }

}
// Función para enviar datos al cliente (navegador)
void sendDataToClient() {
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (isnan(temp)) temp = 0.0;  // Evita NaN
  if (isnan(hum)) hum = 0.0;    // Evita NaN

  long duration, distance;
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  duration = pulseIn(ECHO_PIN, HIGH);
  distance = (duration / 2) / 29.1; // Convertir a cm

  String distanceMessage = (distance >= 0 && distance < 10) ? "Se detecta un objeto" : "No hay nada";

  String json = "{\"temperature\":" + String(temp, 1) +
                ",\"humidity\":" + String(hum, 1) +
                ",\"distance\":\"" + distance + "\"}";

  webSocket.broadcastTXT(json);
}

// Manejo de mensajes WebSocket
void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t length) {
  if (payload == nullptr || length == 0) return;

  String message = String((char *)payload);
  Serial.print("Mensaje recibido de cliente ");
  Serial.print(num);
  Serial.print(": ");
  Serial.println(message);

  if (message == "Luz_ON") {
    digitalWrite(LED_PIN, HIGH);
    sendDataToAPI("Actuador", "Luz", "ON", "ON/OFF");
  } else if (message == "Luz_OFF") {
    digitalWrite(LED_PIN, LOW);
    sendDataToAPI("Actuador", "Luz", "OFF", "ON/OFF");
  } else if (message == "Servo_Left") {
    servo.write(0);
    sendDataToAPI("Actuador", "Servomotor", "Servo_Left", "Rotating/Stop");
  } else if (message == "Servo_Right") {
    servo.write(180);
    sendDataToAPI("Actuador", "Servomotor", "Servo_Right", "Rotating/Stop");
  } else if (message == "Servo_Stop") {
    servo.write(90);
    sendDataToAPI("Actuador", "Servomotor", "Servo_Stop", "Rotating/Stop");
  }
}

const char* webpage = R"rawliteral(
  <!DOCTYPE html>
  <html lang='es'>
  <head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>ESP32 Dashboard</title>
    <link href='https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap' rel='stylesheet'>
    <style>
      body { 
        font-family: 'Poppins', sans-serif; 
        background: #000000; 
        color: #fff; 
        text-align: center; 
        margin: 0; 
        padding: 20px; 
        min-height: 100vh; 
        display: flex; 
        justify-content: center; 
        align-items: center; 
      }
      h1 { 
        color: #fff; 
        font-size: 2.5rem; 
        margin-bottom: 20px; 
      }
      .container { 
        max-width: 500px; 
        width: 100%; 
        background: rgba(255, 255, 255, 0.1); 
        padding: 30px; 
        border-radius: 15px; 
        backdrop-filter: blur(10px); 
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2); 
      }
      .button-group { 
        display: flex; 
        justify-content: space-between; 
        margin-bottom: 20px; 
      }
      button { 
        background: rgba(255, 255, 255, 0.2); 
        color: white; 
        border: none; 
        padding: 15px 25px; 
        margin: 5px; 
        border-radius: 8px; 
        font-size: 16px; 
        cursor: pointer; 
        transition: 0.3s; 
        flex: 1; 
      }
      button:hover { 
        background: rgba(255, 255, 255, 0.3); 
        transform: translateY(-2px); 
      }
      .data-box { 
        margin-top: 20px; 
        padding: 20px; 
        font-size: 18px; 
        font-weight: bold; 
        border-radius: 10px; 
        background: rgba(255, 255, 255, 0.1); 
        color: #fff; 
      }
      .data-box span { 
        display: block; 
        font-size: 24px; 
        margin-top: 10px; 
      }
      .servo-control { 
        margin-top: 30px; 
      }
      .servo-control h2 { 
        font-size: 1.8rem; 
        margin-bottom: 15px; 
      }
    </style>
  </head>
  <body>
    <div class='container'>
      <h1>MANEJO DE LA ESP32</h1>
      <div class='data-box'>
        <div>Temperatura Actual: <span id='temp'>--</span>°C</div>
      </div>
      <div class='data-box'>
        <div>Nivel de Humedad: <span id='humidity'>--</span></div>
      </div>
      <div class='data-box'>
        <div>DIstancia del Objeto: <span id='distance'>--</span></div>
      </div>
      <div class='button-group'>
        <button onclick="sendMessage('Luz_ON')" style="background: #4caf50;">Encender LED</button>
        <button onclick="sendMessage('Luz_OFF')" style="background: #f44336;">Apagar LED</button>
      </div>
      <div class='servo-control'>
        <h2>Control de Servo</h2>
        <div class='button-group'>
          <button onclick="sendMessage('Servo_Left')" style="background: #2196f3;">Izquierda</button>
          <button onclick="sendMessage('Servo_Right')" style="background: #2196f3;">Derecha</button>
          <button onclick="sendMessage('Servo_Stop')" style="background: #ff9800;">Volver a 0</button>
        </div>
      </div>
    </div>

    <script>
      var ws;

      function connectWebSocket() {
        ws = new WebSocket('ws://' + location.hostname + ':81/');
        
        ws.onopen = function () {
          console.log("WebSocket Conectado");
        };

        ws.onerror = function (error) {
          console.error("WebSocket Error:", error);
        };

        ws.onmessage = function(event) {
          console.log("Datos recibidos:", event.data);
          try {
            var data = JSON.parse(event.data);
            
            if (typeof data.temperature !== "number" || typeof data.humidity !== "number") {
              console.error("Datos inválidos:", data);
              return;
            }

            document.getElementById('temp').innerText = data.temperature;
            document.getElementById('humidity').innerText = data.humidity;
            document.getElementById('distance').innerText = data.distance;
          } catch (error) {
            console.error("Error parseando JSON:", error, "Datos:", event.data);
          }
        };
        ws.onclose = function () {
          console.warn("⚠ WebSocket cerrado. Intentando reconectar...");
          setTimeout(connectWebSocket, 3000);
        };
      }

      function sendMessage(message) {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(message);
          console.log("Mensaje enviado:", message);
        } else {
          console.error("No se puede enviar, WebSocket no está abierto.");
        }
      }

      window.onload = connectWebSocket;
    </script>
  </body>
  </html>
  )rawliteral";


  // Leer sensor ultrasonico con validación de datos
float readUltrasonic() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);

    long duration = pulseIn(ECHO_PIN, HIGH, 30000); // Max 30ms (~5m de distancia)
    if (duration == 0) return -1; // Fallo en la medición

    float distance = duration*0.034/2;
    return (distance >= 0 && distance <= 400) ? distance: -1; // Filtrar valores no realistas
  }

void setup() {
  Serial.begin(115200);
  connectWiFi();
  dht.begin();
  pinMode(LED_PIN, OUTPUT);
  servo.attach(SERVO_PIN);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  // Configuración del WebSocket
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  server.on("/",[]() {server.send(200, "text/html", webpage); });
  server.begin();

}

void loop() {
  webSocket.loop();
  server.handleClient();
  sendDataToClient();
  scanParams();
}